# TEST: like listing
class LikeListingTestCase(AuthenticatedAPITestCase):
    """
    Test case for testing the like functionality of a listing.

    Inherits from AuthenticatedAPITestCase to set up an authenticated user 
    and reusable client for API requests.
    """
    def _generate_test_image(self):
        img = Image.new(
            "RGB", (100, 100), color=(255, 0, 0)
        )  # Create a 100x100 red image
        buffer = BytesIO()
        img.save(buffer, format="JPEG")
        buffer.seek(0)
        return SimpleUploadedFile(
            "test_image.jpg", buffer.read(), content_type="image/jpeg"
        )

    def setUp(self):
        """
        Set up the test environment by creating a test listing.
        This method ensures an authenticated user and a valid listing exist before each test.
        """
        # Call the parent setup to create a test user and authenticated client
        super().setUp()
        test_image = self._generate_test_image()

        # Test data for the listing
        self.test_listing_data = {
            "title": "Test Listing",
            "condition": "New",
            "description": "A sample test listing for testing like functionality.",
            "image": test_image,
            "price": 999.0,
            "likes": 0,  # Initial likes
            "dislikes": 0,  # Initial dislikes
            "tags": ["Test", "Sample"],
        }

        # Retrieve the authenticated user's ID
        self.user_id = self.user_handler.get_user_by_username("TestUsername").id

        #create the listing and retrieve its ID from the response
        response = ListingHandler().create_listing(
            validated_data=self.test_listing_data, user_id=self.user_id
        )

        # Check that the response is successful and contains the listing ID
        assert response.status_code == 201, f"Failed to create listing: {response.data}"
        self.listing_id = response.data.get("id")
        assert self.listing_id is not None, "Listing ID was not returned in the response."

        # Define the like endpoint for the created listing
        self.like_url = reverse("listing-like-listing", kwargs={"pk": self.listing_id})




    def test_like_listing(self):
        """
        Test liking a listing and verify that the like count increments.
        """
        # Send a POST request to the like endpoint
        response = self.client.post(self.like_url)

        # Verify the response status is 204 No Content (success)
        self.assertEqual(
            response.status_code,
            status.HTTP_204_NO_CONTENT,
            f"Expected status 204, got {response.status_code}.",
        )

        # Fetch the updated listing data to verify the like count
        updated_listing = ListingHandler().get_listing(self.listing_id)

        # Assert the like count is incremented by 1
        self.assertEqual(
            updated_listing["likes"],
            1,
            f"Expected 1 like, got {updated_listing['likes']}.",
        )

    def tearDown(self):
        """
        Tear down the test environment by deleting the test listing and cleaning up resources.
        """
        # Remove the created test listing
        if self.listing_id:
            ListingHandler().delete_listing(self.listing_id)

        # Call the parent teardown to clean up the authenticated user
        super().tearDown()